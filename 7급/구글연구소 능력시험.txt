#include <iostream>
#include <fstream>
#include <string>
#include <math.h>
using namespace std;

//숫자에 포함된 1의 갯수를 세는 함수 
int digitOneNum(int x);

int main(){
	ifstream in("input.txt");
	ofstream out("output.txt");

	int n, i, dCnt, s;
	dCnt = 0; s = 0; 

	in >> n;

	for(i=0 ; i<=n ; i+=10){
	    dCnt = digitOneNum(i);
	    s += dCnt * 10 + 1;
	}
	n = n % 10;	
	s = s - (9 - n) * dCnt;
	
	if(n == 0)
		s = s - 1;

	out << s << endl;

	return 0;
}

int digitOneNum(int x){
	int r, cnt;
	cnt = 0;
	do{
		r = x % 10;
		if(r == 1)
			cnt++;
		x = x / 10;
	}while(x != 0);

	return cnt;
}
----------------------------------------------------------------------------
1의 자리수에 따라 모든 수를 10개로 분류하고(0, 1, 2, ..., 9)
10의 배수일 때(1의 자리 : 0) 1의 갯수만 헤아려서 10을 곱하고
1을 더하면 특정 줄(10개의 숫자)에 있는 1의 갯수가 계산된다. 

예를 들어, 39까지의 숫자에서 1의 갯수를 구한다고 하자. 

 0  1  2  3  4  5  6  7  8  9  - 1
10 11 12 13 14 15 16 17 18 19  - 2
20 21 22 23 24 25 26 27 28 29  - 3
30 31 32 33 34 35 36 37 38 39  - 4
..................................
110 111 112 113 114 115 116 117 118 119 - 5 

10의 배수(0, 10, 20, 30)일 때 각각 1의 갯수를 계산한다. 
1번줄에서 1의 갯수는 0 x 10 + 1 = 1
2번줄에서 1의 갯수는 1 x 10 + 1 = 11
3번줄에서 1의 갯수는 0 x 10 + 1 = 1
4번줄에서 1의 갯수는 0 x 10 + 1 = 1
5번줄에서 1의 갯수는 2 x 10 + 1 = 21

다만 만약 113까지만 구한다고 하면 다시 해당 갯수만큼 빼줘야 한다. 
현재는 끝자리가 9일때까지 구했기 때문이다. 

(9 - 3) x 2(110의 1의 갯수) = 12개를 빼준다. 그러면 21 - 12 = 9개가 된다. 
만약 끝자리가 0까지 구하려면 아직 1이 나오지 않았으므로 1만큼 더 빼줘야 한다.
------------------------------------------------------------------------------ 

